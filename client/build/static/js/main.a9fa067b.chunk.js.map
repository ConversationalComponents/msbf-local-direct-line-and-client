{"version":3,"sources":["utils/makeMessage.tsx","utils/sendToBot.tsx","utils/poll.tsx","utils/initDirectLine.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["config","window","Config","makeMessage","isUser","text","id","message","avatar","userAvatar","botAvatar","isLoading","sendToBot","conversationId","a","fetch","method","headers","body","JSON","stringify","type","from","USER_ID","poll","activities","json","actObj","startPolling","onActivities","doPoll","then","setInterval","initDirectLine","onIdReceived","reply","getConfigHeaderAlignCss","headerAlignment","Boolean","location","hostname","match","ReactDOM","render","useState","content","setContent","headerImage","style","height","flex","display","justifyContent","flexDirection","alt","src","getHeaderImage","headerTextStyle","fontSize","headerText","getHeaderText","headerAdditionalContent","setConversationId","setActivities","useEffect","botActivities","filter","act","some","c","length","map","width","onSubmit","toString","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a9fa067b.chunk.js","sourcesContent":["import { Config } from \"../types\";\r\n\r\n//@ts-ignore\r\nconst config: Config = window.Config;\r\n\r\nexport const makeMessage = (isUser: boolean, text: string, id: string) => ({\r\n  isUser,\r\n  message: text,\r\n  avatar: isUser\r\n    ? config.userAvatar || \"https://img.icons8.com/color/search/0\"\r\n    : config.botAvatar || \"https://img.icons8.com/color/search/1\",\r\n  id,\r\n  isLoading: false\r\n});\r\n","import { USER_ID } from \"../App\";\r\nexport const sendToBot = async (conversationId: string, message: string) => {\r\n  fetch(`/directline/conversations/${conversationId}/activities`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({\r\n      type: \"message\",\r\n      from: {\r\n        id: USER_ID\r\n      },\r\n      text: message\r\n    })\r\n  });\r\n};\r\n","import { setInterval } from \"timers\";\r\nimport { Exchange } from \"../types\";\r\n\r\nconst POLL_INTERVAL = 300;\r\n\r\nconst poll = async (conversationId: string) => {\r\n  const activities = await fetch(\r\n    `/directline/conversations/${conversationId}/activities`\r\n  );\r\n  const actObj = await activities.json();\r\n  return (actObj.activities || []) as Exchange[];\r\n};\r\nexport const startPolling = async (\r\n  conversationId: string,\r\n  onActivities: (activities: Exchange[]) => void\r\n) => {\r\n  const doPoll = () => poll(conversationId).then(onActivities);\r\n  setInterval(doPoll, POLL_INTERVAL);\r\n};\r\n","export const initDirectLine = async (onIdReceived: (id: string) => void) => {\r\n  const reply = await fetch(\"/directline/conversations\", {\r\n    method: \"POST\"\r\n  });\r\n  const json = await reply.json();\r\n  onIdReceived(json.conversationId);\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { ChatWindow } from \"@conversationalcomponents/chat-window\";\nimport { makeMessage } from \"./utils/makeMessage\";\nimport { sendToBot } from \"./utils/sendToBot\";\nimport { Exchange, Config } from \"./types\";\nimport { startPolling } from \"./utils/poll\";\nimport { initDirectLine } from \"./utils/initDirectLine\";\n\nexport const USER_ID = \"user\";\n\nconst getConfigHeaderAlignCss = (config: Config) => {\n  let reply = \"center\";\n  if (config.headerAlignment) {\n    if (config.headerAlignment === \"left\") {\n      reply = \"flex-start\";\n    } else if (config.headerAlignment === \"right\") {\n      reply = \"flex-end\";\n    }\n  }\n  return reply;\n};\n\nconst getHeaderImage = (config: Config) => {\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        flex: 1,\n        display: \"flex\",\n        justifyContent: getConfigHeaderAlignCss(config)\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\"\n        }}\n      >\n        <img\n          style={{\n            height: \"calc(100% - 12px)\"\n          }}\n          alt=\"\"\n          src={config.headerImage}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst getHeaderText = (config: Config) => {\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        flex: 1,\n        display: \"flex\",\n        justifyContent: getConfigHeaderAlignCss(config)\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\"\n        }}\n      >\n        <div style={config.headerTextStyle || { fontSize: \"17px\" }}>\n          {config.headerText}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const App = () => {\n  const [content, setContent] = useState([\n    makeMessage(false, \"Hello and welcome to the example!\", \"entry id\")\n  ]);\n  // @ts-ignore\n  const [config] = useState<Config>(window.Config);\n  const [headerAdditionalContent] = useState(\n    config.headerImage ? getHeaderImage(config) : getHeaderText(config)\n  );\n\n  const [conversationId, setConversationId] = useState(\"\");\n  const [activities, setActivities] = useState<Exchange[]>([]);\n\n  useEffect(() => {\n    initDirectLine(setConversationId);\n  }, []);\n\n  useEffect(() => {\n    const botActivities = activities.filter(\n      act => act.from.id !== USER_ID && !content.some(c => c.id === act.id)\n    );\n    if (!botActivities.length) return;\n    setContent([\n      ...content,\n      ...botActivities.map(act => makeMessage(false, act.text, act.id))\n    ]);\n    // eslint-disable-next-line\n  }, [activities]);\n\n  useEffect(() => {\n    if (!conversationId) return;\n    startPolling(conversationId, setActivities);\n    // eslint-disable-next-line\n  }, [conversationId]);\n\n  const processUserInput = (text: string) => {\n    setContent([\n      ...content,\n      makeMessage(true, text, content.length.toString())\n    ]);\n    sendToBot(conversationId, text);\n  };\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          height: \"100%\"\n        }}\n      >\n        <div style={{ height: \"500px\", width: \"300px\" }}>\n          <ChatWindow\n            headerAdditionalContent={headerAdditionalContent}\n            content={content}\n            onSubmit={processUserInput}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}